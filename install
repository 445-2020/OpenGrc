#!/bin/bash

cp .env.example .env

# Check Node.js version
node_version=$(node -v | cut -c 2-)
if [[ "$node_version" < "16" ]]; then
  echo "Checking Node.js version... FAILED! Node.js version 16 or higher is required. You have $node_version"
  exit 1
else
  echo "Checking Node.js version... GOOD!"
fi

# Check NPM version
npm_version=$(npm -v)
if [[ "$npm_version" < "9" ]]; then
  echo "Checking NPM version... FAILED! NPM version 9 or higher is required. You have $npm_version"
  exit 1
else
  echo "Checking NPM version... GOOD!"
fi


# Run Composer
echo "Getting Dependencies..."
  composer update


# Generate application key
echo "Generating application key..."
  php artisan key:generate

# Database setup
echo "Available database backends:"
select db_choice in sqlite mysql postgres; do
  case $db_choice in
    sqlite)
      sed -i'' -e "s/^DB_CONNECTION=.*/DB_CONNECTION=sqlite/" .env
      sed -i'' -e "s#^DB_DATABASE=.*#DB_DATABASE=$(pwd)/database/opengrc.sqlite#" .env
      break
      ;;
    mysql|postgres)
      read -p "Enter database host [127.0.0.1]: " db_host
      db_host=${db_host:-127.0.0.1}
      read -p "Enter database port [3306]: " db_port
      db_port=${db_port:-3306}
      read -p "Enter database name [opengrc]: " db_name
      db_name=${db_name:-opengrc}
      read -p "Enter database username [root]: " db_user
      db_user=${db_user:-root}
      read -s -p "Enter database password: " db_password
      echo
      sed -i "s/^DB_CONNECTION=.*/DB_CONNECTION=$db_choice/" .env
      sed -i "s/^DB_HOST=.*/DB_HOST=$db_host/" .env
      sed -i "s/^DB_PORT=.*/DB_PORT=$db_port/" .env
      sed -i "s/^DB_DATABASE=.*/DB_DATABASE=$db_name/" .env
      sed -i "s/^DB_USERNAME=.*/DB_USERNAME=$db_user/" .env
      sed -i "s/^DB_PASSWORD=.*/DB_PASSWORD=$db_password/" .env
      break
      ;;
    *)
      echo "Invalid choice."
      ;;
  esac
done
echo "Updated .env file..."


# Build front-end assets
echo "Building Front-End Assets..."
npm install && npm run build

# Run migrations
php artisan migrate

# Create admin user
read -p "Admin Username [admin@example.com]: " admin_username
admin_username=${admin_username:-admin@example.com}
read -s -p "Admin Password: " admin_password
echo
php artisan tinker <<EOF
use App\Models\User;
use Illuminate\Support\Facades\Hash;

\$user = User::create([
  'name' => 'Admin User',
  'email' => '$admin_username',
  'password' => Hash::make('$admin_password'),
  'password_reset_required' => false,
]);

echo "Admin User Created...\n";
EOF

# Run seeders
php artisan db:seed --class=SettingsSeeder
php artisan db:seed --class=RolePermissionSeeder

# Set general settings
read -p "Site Name [OpenGRC]: " site_name
site_name=${site_name:-OpenGRC}
read -p "Site URL [https://opengrc.test]: " site_url
site_url=${site_url:-https://opengrc.test}

php artisan settings:set general.url $site_url
php artisan settings:set general.name $site_name
echo "General settings updated...";

# Update .env with site name and URL (using a different delimiter for sed)
sed -i "s|APPNAME=.*|APPNAME=$site_name|g" .env
sed -i "s|APP_URL=.*|APP_URL=$site_url|g" .env

# Set Permissions
echo "Setting Starter Permissions"
find . -type f -print0 | xargs --null sudo chmod 666
find . -type d -print0 | xargs --null sudo chmod 775
sudo chmod 777 set_permissions
sudo chmod 777 artisan
sudo chmod 777 install
sudo chmod 777 vendor/bin/*
sudo chmod 777 storage -R

chmod 777 node_modules/.bin/*
echo "** IMPORTANT **"
echo "Change the file system permissions for least privilege based on you own system."
echo "***************"
echo "############################################"
echo "OpenGRC INSTALLED! Visit $site_url to login!"
echo "############################################"